{"ast":null,"code":"var _jsxFileName = \"/Users/ethanreynolds/Documents/Pet Projects/Rally Metrics Front End/my-app/src/component/WorkBreakdown.tsx\",\n  _s = $RefreshSig$();\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport const WorkBreakdown = () => {\n  _s();\n  const dta = [4, 5, 6];\n  const [graph, setGraph] = useState([]);\n  const [data, setData] = useState({\n    labels: ['a', 'b', 'c'],\n    datasets: dta.map(d => {\n      const point = {\n        label: d + ' Average Velocity',\n        data: [d],\n        backgroundColor: ['rgb(153, 102, 255)'],\n        borderColor: ['rgb(153, 102, 255)'],\n        borderWidth: 1\n      };\n      return point;\n    })\n  });\n  const test = 1;\n\n  // useEffect(() => {\n  //     fetch('http://127.0.0.1:8000/breakdown')\n  //         .then(response => response.json())\n  //         .then(d => {\n  //             setGraph(d);\n  //             console.log(d)\n\n  //             setData({\n  //                 labels: graph.map(point => point.name),\n  //                 datasets: [{\n  //                     label: ' Average Velocity',\n  //                     data: graph.map(item => item.FEATURE[1]),\n  //                     backgroundColor: [\n  //                         'rgb(153, 102, 255)'\n  //                     ],\n  //                     borderColor: [\n  //                         'rgb(153, 102, 0)'\n  //                     ],\n  //                     borderWidth: 1,\n  //                 }]\n  //             })\n  //         });\n  // }, [test])\n\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 12\n  }, this);\n};\n_s(WorkBreakdown, \"qcnK/zs57jZa4fk32U2mVOXwjWk=\");\n_c = WorkBreakdown;\nvar _c;\n$RefreshReg$(_c, \"WorkBreakdown\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","useState","Bar","jsxDEV","_jsxDEV","register","WorkBreakdown","_s","dta","graph","setGraph","data","setData","labels","datasets","map","d","point","label","backgroundColor","borderColor","borderWidth","test","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ethanreynolds/Documents/Pet Projects/Rally Metrics Front End/my-app/src/component/WorkBreakdown.tsx"],"sourcesContent":["import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { useEffect, useState } from 'react';\nimport { Bar, Pie } from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\ninterface graphInterface {\n    FEATURE: number[],\n    DEFECT: number[],\n    ENHANCEMENT: number[],\n    STABILIZATION: number[],\n    SECURITY: number[],\n    name: string\n}\n\ninterface graphVisuals {\n    labels: [],\n    datasets: []\n}\nexport const WorkBreakdown: React.FC<{}> = () => {\n\n    const dta = [4, 5, 6]\n    const [graph, setGraph] = useState<graphInterface[]>([])\n    const [data, setData] = useState({\n        labels: ['a', 'b', 'c'],\n        datasets: dta.map(d => {\n            const point = {\n                label: d + ' Average Velocity',\n                data: [d],\n                backgroundColor: [\n                    'rgb(153, 102, 255)'\n                ],\n                borderColor: [\n                    'rgb(153, 102, 255)'\n                ],\n                borderWidth: 1\n            }\n            return point\n        })\n    });\n\n    const test = 1\n\n    // useEffect(() => {\n    //     fetch('http://127.0.0.1:8000/breakdown')\n    //         .then(response => response.json())\n    //         .then(d => {\n    //             setGraph(d);\n    //             console.log(d)\n\n    //             setData({\n    //                 labels: graph.map(point => point.name),\n    //                 datasets: [{\n    //                     label: ' Average Velocity',\n    //                     data: graph.map(item => item.FEATURE[1]),\n    //                     backgroundColor: [\n    //                         'rgb(153, 102, 255)'\n    //                     ],\n    //                     borderColor: [\n    //                         'rgb(153, 102, 0)'\n    //                     ],\n    //                     borderWidth: 1,\n    //                 }]\n    //             })\n    //         });\n    // }, [test])\n\n    return <Bar data={data} />;\n};"],"mappings":";;AAAA,SACIA,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;AACjB,SAAoBC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,GAAG,QAAa,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3CV,OAAO,CAACW,QAAQ,CACZV,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,CACT;AAeD,OAAO,MAAMM,aAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE7C,MAAMC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAmB,EAAE,CAAC;EACxD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC;IAC7BY,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACvBC,QAAQ,EAAEN,GAAG,CAACO,GAAG,CAACC,CAAC,IAAI;MACnB,MAAMC,KAAK,GAAG;QACVC,KAAK,EAAEF,CAAC,GAAG,mBAAmB;QAC9BL,IAAI,EAAE,CAACK,CAAC,CAAC;QACTG,eAAe,EAAE,CACb,oBAAoB,CACvB;QACDC,WAAW,EAAE,CACT,oBAAoB,CACvB;QACDC,WAAW,EAAE;MACjB,CAAC;MACD,OAAOJ,KAAK;IAChB,CAAC;EACL,CAAC,CAAC;EAEF,MAAMK,IAAI,GAAG,CAAC;;EAEd;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAOlB,OAAA,CAACF,GAAG;IAACS,IAAI,EAAEA;EAAK;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAC9B,CAAC;AAACnB,EAAA,CAjDWD,aAA2B;AAAAqB,EAAA,GAA3BrB,aAA2B;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}