{"ast":null,"code":"var _jsxFileName = \"/Users/ethanreynolds/Documents/Pet Projects/Rally-Metrics/my-app/src/Data.tsx\";\nimport React from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip } from 'chart.js/auto';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip);\nfunction Data() {\n  // const navigate = useNavigate();\n\n  //   const [iterationId, setIterationId] = useState<string>('499934827772')\n\n  //   const c: dataInterface = {\n  //     iteration: '',\n  //     storyType: '',\n  //     totalStories: 0,\n  //     totalPoints: 0,\n  //   }\n  //   const g: breakdownInterface = {\n  //     storyType: 'string',\n  //     totalStories: 0,\n  //     totalPoints: 0\n  //   }\n\n  //   const v: velocity = {\n  //     id: 0,\n  //     velocity: 0,\n  //     capacity: 0\n  //   }\n\n  //   // USER VELOCITY\n  //   const [data, setData] = useState<velocity[]>([v])\n  //   const [vel, setVel] = useState<boolean>(true)\n  //   const [historic, setHistoric] = useState<boolean>(true)\n  //   const [breakdown, setBreakdown] = useState<boolean>(true)\n\n  //   // const [x, setX] = useState<number[]>(data.map(d => d.id))\n  //   // const [y, setY] = useState<number[]>(data.map(d => d.velocity))\n  //   // const [y1, setY1] = useState<number[]>(data.map(d => d.capacity))\n\n  //   // useEffect(() => {\n  //   //   setX(data.map(d => d.id))\n  //   //   setY(data.map(d => d.velocity))\n  //   //   setY1(data.map(d => d.capacity))\n  //   // }, [data])\n\n  //   // WORK BREAKDOWN BY ITERATION\n  //   const [data2, setData2] = useState<breakdownInterface[]>([g]);\n  //   const [x, setX] = useState<string[]>([])\n  //   const [y, setY] = useState<number[]>([])\n  //   const [y1, setY1] = useState<number[]>([])\n\n  //   let arr1: number[] = [];\n  //   let arr3: number[] = [];\n  //   let arr2: string[] = [];\n\n  //   useEffect(() => {\n\n  //     data2.map(d => {\n  //       arr1.push(d.totalStories);\n  //       arr3.push(d.totalPoints);\n  //       arr2.push(d.storyType)\n  //     })\n  //     setY(arr1);\n  //     setX(arr2);\n  //     setY1(arr3);\n  //   }, [data2])\n\n  //   // WORK BREAKDOWN BY ITERATION\n  //   const [data1, setData1] = useState<dataInterface[]>([c]);\n  //   const [enhancement, setEnhancement] = useState<number[]>([])\n  //   const [security, setSecurity] = useState<number[]>([])\n  //   const [stabilization, setStabilization] = useState<number[]>([])\n  //   const [feature, setFeature] = useState<number[]>([])\n  //   const [defect, setDefect] = useState<number[]>([])\n  //   const [iteration, setIteration] = useState<string[]>([])\n  //   const velocityData: handleData = {\n  //     setData3: setData,\n  //     setHistoric: setHistoric,\n  //     setVel:setVel,\n  //     setBreakdown:setBreakdown,\n  //   }\n\n  //   const breakdownData: handleData = {\n  //     setData3: setData2,\n  //     setHistoric: setHistoric,\n  //     setVel:setVel,\n  //     setBreakdown:setBreakdown,\n  //   }\n\n  //   const historicData: handleData = {\n  //     setData3: setData1,\n  //     setHistoric: setHistoric,\n  //     setVel:setVel,\n  //     setBreakdown:setBreakdown,\n  //   }\n\n  //   function uniq(a: string[]) {\n  //     return Array.from(new Set(a));\n  //   }\n\n  //   useEffect(() => {\n  //     let enh: number[] = [];\n  //     let sec: number[] = [];\n  //     let sta: number[] = [];\n  //     let fea: number[] = [];\n  //     let def: number[] = [];\n  //     let iter: string[] = [];\n  //     const map1 = new Map();\n  //     data1.filter(d => {\n  //       return !(d.iteration.includes(\"PLAN\"))\n  //     })\n  //       // .filter(d => {\n  //       //   return d.iteration.includes(\"2022\") || d.iteration.includes(\"2023\")\n  //       // })\n  //       .map(d => {\n  //         if (d.storyType === \"DEFECT\") {\n  //           def.push(d.totalStories)\n  //         }\n  //         if (d.storyType === \"STABILIZATION\") {\n  //           sta.push(d.totalStories)\n  //         }\n  //         if (d.storyType === \"ENHANCEMENT\") {\n  //           enh.push(d.totalStories)\n  //         }\n  //         if (d.storyType === \"FEATURE\") {\n  //           fea.push(d.totalStories)\n  //         }\n  //         if (d.storyType === \"SECURITY\") {\n  //           sec.push(d.totalStories)\n  //         }\n  //         iter.push(d.iteration)\n  //         if (!map1.has(d.iteration)) {\n  //           map1.set(d.iteration, 0)\n  //         }\n  //         const newValue = d.totalStories + map1.get(d.iteration)\n  //         map1.set(d.iteration, newValue);\n  //       })\n  //     setEnhancement(enh);\n  //     setStabilization(sta);\n  //     setSecurity(sec);\n  //     setDefect(def);\n  //     setFeature(fea);\n  //     setIteration(uniq(iter));\n\n  //   }, [data1])\n\n  //    const handleVelocityClick = () => {\n  //     navigate(\"/velocity\");\n  //   }\n\n  //  const handleHistoryClick = () => {\n  //     navigate(\"/history\");\n  //   }\n\n  //  const handleBreakdownClick = () => {\n  //     navigate(\"/breakdown/499934827772\");\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n\n// export function handleBreakdown({setData3, setVel, setHistoric, setBreakdown}:handleData, iterationId:string) {\n//   fetch(`http://127.0.0.1:8000/breakdown/${iterationId}`, {\n//     method: 'GET',\n//     headers: {\n//       accept: 'application/json',\n//     },\n//   }).then(resp => resp.json()).then(json => setData3(json));\n//   setVel(true)\n//   setHistoric(true)\n//   setBreakdown(false)\n// }\n\n// export function handleHistoricClick({setData3, setVel, setHistoric, setBreakdown}:handleData) {\n//   fetch('http://127.0.0.1:8000/breakdown', {\n//     method: 'GET',\n//     headers: {\n//       accept: 'application/json',\n//     },\n//   }).then(resp => resp.json()).then(json => setData3(json));\n//   setVel(true);\n//   setBreakdown(true)\n//   setHistoric(false);\n// }\n\n// export function handleVelocity({setData3, setVel, setHistoric, setBreakdown}:handleData) {\n//   fetch('http://127.0.0.1:8000/velocity/users', {\n//     method: 'GET',\n//     headers: {\n//       accept: 'application/json',\n//     },\n//   }).then(resp => resp.json()).then(json => setData3(json.filter((d: { velocity: number, capacity: number, id: string }) => {\n//     return d.capacity > 0\n//   })));\n//   setHistoric(true);\n//   setBreakdown(true);\n//   setVel(false);\n// }\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","jsxDEV","_jsxDEV","register","Data","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ethanreynolds/Documents/Pet Projects/Rally-Metrics/my-app/src/Data.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n} from 'chart.js/auto';\nimport './App.css';\nimport { UserVelocity } from './component/Bar';\nimport { WorkBreakdownByIteration } from './component/WorkBreakdown';\nimport { HistoricalWorkBreakdown } from './component/HistoricalWorkBreakdown';\nimport { velocity } from './interfaces/interface';\nimport { ArrayDestructuringAssignment } from 'typescript';\nimport { NavigateFunction, useNavigate } from 'react-router-dom';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip\n);\n\n\nfunction Data() {\n\n    // const navigate = useNavigate();\n\n//   const [iterationId, setIterationId] = useState<string>('499934827772')\n\n//   const c: dataInterface = {\n//     iteration: '',\n//     storyType: '',\n//     totalStories: 0,\n//     totalPoints: 0,\n//   }\n//   const g: breakdownInterface = {\n//     storyType: 'string',\n//     totalStories: 0,\n//     totalPoints: 0\n//   }\n\n//   const v: velocity = {\n//     id: 0,\n//     velocity: 0,\n//     capacity: 0\n//   }\n\n//   // USER VELOCITY\n//   const [data, setData] = useState<velocity[]>([v])\n//   const [vel, setVel] = useState<boolean>(true)\n//   const [historic, setHistoric] = useState<boolean>(true)\n//   const [breakdown, setBreakdown] = useState<boolean>(true)\n\n//   // const [x, setX] = useState<number[]>(data.map(d => d.id))\n//   // const [y, setY] = useState<number[]>(data.map(d => d.velocity))\n//   // const [y1, setY1] = useState<number[]>(data.map(d => d.capacity))\n\n\n\n//   // useEffect(() => {\n//   //   setX(data.map(d => d.id))\n//   //   setY(data.map(d => d.velocity))\n//   //   setY1(data.map(d => d.capacity))\n//   // }, [data])\n\n//   // WORK BREAKDOWN BY ITERATION\n//   const [data2, setData2] = useState<breakdownInterface[]>([g]);\n//   const [x, setX] = useState<string[]>([])\n//   const [y, setY] = useState<number[]>([])\n//   const [y1, setY1] = useState<number[]>([])\n\n//   let arr1: number[] = [];\n//   let arr3: number[] = [];\n//   let arr2: string[] = [];\n\n\n//   useEffect(() => {\n\n//     data2.map(d => {\n//       arr1.push(d.totalStories);\n//       arr3.push(d.totalPoints);\n//       arr2.push(d.storyType)\n//     })\n//     setY(arr1);\n//     setX(arr2);\n//     setY1(arr3);\n//   }, [data2])\n\n//   // WORK BREAKDOWN BY ITERATION\n//   const [data1, setData1] = useState<dataInterface[]>([c]);\n//   const [enhancement, setEnhancement] = useState<number[]>([])\n//   const [security, setSecurity] = useState<number[]>([])\n//   const [stabilization, setStabilization] = useState<number[]>([])\n//   const [feature, setFeature] = useState<number[]>([])\n//   const [defect, setDefect] = useState<number[]>([])\n//   const [iteration, setIteration] = useState<string[]>([])\n//   const velocityData: handleData = {\n//     setData3: setData,\n//     setHistoric: setHistoric,\n//     setVel:setVel,\n//     setBreakdown:setBreakdown,\n//   }\n\n//   const breakdownData: handleData = {\n//     setData3: setData2,\n//     setHistoric: setHistoric,\n//     setVel:setVel,\n//     setBreakdown:setBreakdown,\n//   }\n\n//   const historicData: handleData = {\n//     setData3: setData1,\n//     setHistoric: setHistoric,\n//     setVel:setVel,\n//     setBreakdown:setBreakdown,\n//   }\n\n//   function uniq(a: string[]) {\n//     return Array.from(new Set(a));\n//   }\n\n\n//   useEffect(() => {\n//     let enh: number[] = [];\n//     let sec: number[] = [];\n//     let sta: number[] = [];\n//     let fea: number[] = [];\n//     let def: number[] = [];\n//     let iter: string[] = [];\n//     const map1 = new Map();\n//     data1.filter(d => {\n//       return !(d.iteration.includes(\"PLAN\"))\n//     })\n//       // .filter(d => {\n//       //   return d.iteration.includes(\"2022\") || d.iteration.includes(\"2023\")\n//       // })\n//       .map(d => {\n//         if (d.storyType === \"DEFECT\") {\n//           def.push(d.totalStories)\n//         }\n//         if (d.storyType === \"STABILIZATION\") {\n//           sta.push(d.totalStories)\n//         }\n//         if (d.storyType === \"ENHANCEMENT\") {\n//           enh.push(d.totalStories)\n//         }\n//         if (d.storyType === \"FEATURE\") {\n//           fea.push(d.totalStories)\n//         }\n//         if (d.storyType === \"SECURITY\") {\n//           sec.push(d.totalStories)\n//         }\n//         iter.push(d.iteration)\n//         if (!map1.has(d.iteration)) {\n//           map1.set(d.iteration, 0)\n//         }\n//         const newValue = d.totalStories + map1.get(d.iteration)\n//         map1.set(d.iteration, newValue);\n//       })\n//     setEnhancement(enh);\n//     setStabilization(sta);\n//     setSecurity(sec);\n//     setDefect(def);\n//     setFeature(fea);\n//     setIteration(uniq(iter));\n\n//   }, [data1])\n\n//    const handleVelocityClick = () => {\n//     navigate(\"/velocity\");\n//   }\n\n//  const handleHistoryClick = () => {\n//     navigate(\"/history\");\n//   }\n\n//  const handleBreakdownClick = () => {\n//     navigate(\"/breakdown/499934827772\");\n// }\n\n\n  return (\n    <div className=\"App\">\n        {/* <button onClick={ handleVelocityClick }>Get Velocity Data</button>\n        <button onClick={ handleHistoryClick }>Get Historical Data</button>\n        <button onClick={ handleBreakdownClick }>Get Most Recent Iteration Data</button> */}\n    </div>\n  );\n}\n\n// export function handleBreakdown({setData3, setVel, setHistoric, setBreakdown}:handleData, iterationId:string) {\n//   fetch(`http://127.0.0.1:8000/breakdown/${iterationId}`, {\n//     method: 'GET',\n//     headers: {\n//       accept: 'application/json',\n//     },\n//   }).then(resp => resp.json()).then(json => setData3(json));\n//   setVel(true)\n//   setHistoric(true)\n//   setBreakdown(false)\n// }\n\n// export function handleHistoricClick({setData3, setVel, setHistoric, setBreakdown}:handleData) {\n//   fetch('http://127.0.0.1:8000/breakdown', {\n//     method: 'GET',\n//     headers: {\n//       accept: 'application/json',\n//     },\n//   }).then(resp => resp.json()).then(json => setData3(json));\n//   setVel(true);\n//   setBreakdown(true)\n//   setHistoric(false);\n// }\n\n// export function handleVelocity({setData3, setVel, setHistoric, setBreakdown}:handleData) {\n//   fetch('http://127.0.0.1:8000/velocity/users', {\n//     method: 'GET',\n//     headers: {\n//       accept: 'application/json',\n//     },\n//   }).then(resp => resp.json()).then(json => setData3(json.filter((d: { velocity: number, capacity: number, id: string }) => {\n//     return d.capacity > 0\n//   })));\n//   setHistoric(true);\n//   setBreakdown(true);\n//   setVel(false);\n// }\n\n\n\nexport default Data;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAkB,OAAO;AAErC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,QACF,eAAe;AACtB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnBP,OAAO,CAACQ,QAAQ,CACdP,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,CACR;AAGD,SAASI,IAAIA,CAAA,EAAG;EAEZ;;EAEJ;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAGE,oBACEF,OAAA;IAAKG,SAAS,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAId;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,GA3MSN,IAAI;AA+Mb,eAAeA,IAAI;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}