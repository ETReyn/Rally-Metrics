{"ast":null,"code":"var _jsxFileName = \"/Users/ethanreynolds/Documents/Pet Projects/Rally Metrics Front End/my-app/src/component/Bar.tsx\",\n  _s = $RefreshSig$();\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport const BarGraph = () => {\n  _s();\n  const dta = [4, 5, 6];\n  const [graph, setGraph] = useState([]);\n  const [data, setData] = useState({\n    labels: [1, 2, 3],\n    datasets: dta.map(d => {\n      const point = {\n        label: d + ' Average Velocity',\n        data: [d],\n        backgroundColor: ['rgb(153, 102, 255)'],\n        borderColor: ['rgb(153, 102, 255)'],\n        borderWidth: 1\n      };\n      return point;\n    })\n  });\n  const test = 1;\n  useEffect(() => {\n    fetch('http://127.0.0.1:8000/velocity/users').then(response => response.json()).then(d => {\n      setGraph(d);\n      setData({\n        labels: graph.map(point => point.id),\n        datasets: [{\n          label: ' Average Velocity',\n          data: graph.map(item => item.velocity),\n          backgroundColor: ['rgb(153, 102, 255)'],\n          borderColor: ['rgb(153, 102, 0)'],\n          borderWidth: 1\n        }]\n      });\n    });\n  }, [test]);\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 12\n  }, this);\n};\n_s(BarGraph, \"IL/HiE/gBPrEQurT2f6OXbkCDwU=\");\n_c = BarGraph;\nvar _c;\n$RefreshReg$(_c, \"BarGraph\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","useEffect","useState","Bar","jsxDEV","_jsxDEV","register","BarGraph","_s","dta","graph","setGraph","data","setData","labels","datasets","map","d","point","label","backgroundColor","borderColor","borderWidth","test","fetch","then","response","json","id","item","velocity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ethanreynolds/Documents/Pet Projects/Rally Metrics Front End/my-app/src/component/Bar.tsx"],"sourcesContent":["import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\ninterface graphData {\n    data: [string]\n    label: [number]\n}\ninterface graphInterface {\n    id: number,\n    velocity: number\n}\n\ninterface graphVisuals {\n    labels: [],\n    datasets: []\n}\nexport const BarGraph: React.FC<{}> = () => {\n\n    const dta = [4, 5, 6]\n    const [graph, setGraph] = useState<graphInterface[]>([])\n    const [data, setData] = useState({\n        labels: [1, 2, 3],\n        datasets: dta.map(d => {\n            const point = {\n                label: d + ' Average Velocity',\n                data: [d],\n                backgroundColor: [\n                    'rgb(153, 102, 255)'\n                ],\n                borderColor: [\n                    'rgb(153, 102, 255)'\n                ],\n                borderWidth: 1\n            }\n            return point\n        })\n    });\n\n    const test = 1\n\n    useEffect(() => {\n        fetch('http://127.0.0.1:8000/velocity/users')\n            .then(response => response.json())\n            .then(d => {\n                setGraph(d);\n\n                setData({\n                    labels: graph.map(point => point.id),\n                    datasets: [{\n                        label: ' Average Velocity',\n                        data: graph.map(item => item.velocity),\n                        backgroundColor: [\n                            'rgb(153, 102, 255)'\n                        ],\n                        borderColor: [\n                            'rgb(153, 102, 0)'\n                        ],\n                        borderWidth: 1,\n                    }]\n                })\n            });\n    }, [test])\n\n    return <Bar data={data} />;\n};"],"mappings":";;AAAA,SACIA,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;AACjB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtCX,OAAO,CAACY,QAAQ,CACZX,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,CACT;AAeD,OAAO,MAAMO,QAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAExC,MAAMC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAmB,EAAE,CAAC;EACxD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC;IAC7BY,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjBC,QAAQ,EAAEN,GAAG,CAACO,GAAG,CAACC,CAAC,IAAI;MACnB,MAAMC,KAAK,GAAG;QACVC,KAAK,EAAEF,CAAC,GAAG,mBAAmB;QAC9BL,IAAI,EAAE,CAACK,CAAC,CAAC;QACTG,eAAe,EAAE,CACb,oBAAoB,CACvB;QACDC,WAAW,EAAE,CACT,oBAAoB,CACvB;QACDC,WAAW,EAAE;MACjB,CAAC;MACD,OAAOJ,KAAK;IAChB,CAAC;EACL,CAAC,CAAC;EAEF,MAAMK,IAAI,GAAG,CAAC;EAEdtB,SAAS,CAAC,MAAM;IACZuB,KAAK,CAAC,sCAAsC,CAAC,CACxCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACR,CAAC,IAAI;MACPN,QAAQ,CAACM,CAAC,CAAC;MAEXJ,OAAO,CAAC;QACJC,MAAM,EAAEJ,KAAK,CAACM,GAAG,CAACE,KAAK,IAAIA,KAAK,CAACU,EAAE,CAAC;QACpCb,QAAQ,EAAE,CAAC;UACPI,KAAK,EAAE,mBAAmB;UAC1BP,IAAI,EAAEF,KAAK,CAACM,GAAG,CAACa,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC;UACtCV,eAAe,EAAE,CACb,oBAAoB,CACvB;UACDC,WAAW,EAAE,CACT,kBAAkB,CACrB;UACDC,WAAW,EAAE;QACjB,CAAC;MACL,CAAC,CAAC;IACN,CAAC,CAAC;EACV,CAAC,EAAE,CAACC,IAAI,CAAC,CAAC;EAEV,oBAAOlB,OAAA,CAACF,GAAG;IAACS,IAAI,EAAEA;EAAK;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAC9B,CAAC;AAAC1B,EAAA,CAhDWD,QAAsB;AAAA4B,EAAA,GAAtB5B,QAAsB;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}